#!/usr/bin/python3
import socket
import sys
import ssl
import os

args = sys.argv
length = len(args)

#initializing variables
createFile = False
sendFile = False
delete = "none"
receivels = False

#findign which command was sent
if length == 3:
    url = args[2]
    urlSearch = url[7:]
    x = urlSearch.find("/")
    path = urlSearch[x:]
    if args[1] == "ls":
        c = "LIST"
        url = args[2]
        print("url is: " + str(url))
        command = "LIST " + path + "\r\n"
        receivels = True
    elif args[1] == "mkdir":
        c = "MKD"
        url = args[2]
        urlSearch = url[7:]
        x = urlSearch.find("/")
        path = urlSearch[x:]
        command = "MKD " + path + "\r\n"
    elif args[1] == "rm":
        c = "DELE"
        url = args[2]
        command = "DELE " + path + "\r\n"
    elif args[1] == "rmdir":
        c = "RMD"
        url = args[2]
        command = "RMD " + path + "\r\n"
    else:
        raise ValueError
elif length == 4:
    if args[1] == "cp":
        if args[2].__contains__("ftps://"):
            # copying file from remote to local
            c = "RETR"
            createFile = True
            
            url = args[2]
            urlSearch = url[7:]
            x = urlSearch.find("/")
            path = urlSearch[x:]
            
            localFile = args[3]
            command = "RETR " + path + "\r\n"
        else:
            # copying file from local to remote
            c = "STOR"
            url = args[3]
            sendFile = True
            
            localFile = args[2]
            urlSearch = url[7:]
            x = urlSearch.find("/")
            path = urlSearch[x:]
            command = "STOR " + path + "\r\n"
    elif args[1] == "mv":
        if args[2].__contains__("ftps://"):
            # moving file from remote to local
            c = "RETR"
            createFile = True
            
            url = args[2]
            
            localFile = args[3]
            urlSearch = url[7:]
            x = urlSearch.find("/")
            path = urlSearch[x:]
            command = "RETR " + path + "\r\n"
            
            delete = "remote"
            
            command2 = "DELE " + path + "\r\n"
        else:
            # moving file from local to remote
            c = "STOR"
            url = args[3]
            
            sendFile = True
            localFile = args[2]
            urlSearch = url[7:]
            x = urlSearch.find("/")
            path = urlSearch[x:]
            command = "STOR " + path + "\r\n"
            delete = "local"
            
    else:
        raise ValueError
else:
    raise ValueError
# raising errors because the command is not sent correctly

# get the username and password from the url if possible
# getting the host and port from the url
# first 7 characters of the url are irrelevant
urlSearch = url[7:]
x = urlSearch.find("/")
path = urlSearch[x:]

urlSearch = urlSearch[:x]
y = urlSearch.find("@")
hostAndPort = urlSearch[y+1:]
userAndPass = urlSearch[:y]
z = hostAndPort.find(":")
if z == -1:
    port = 21
    host = hostAndPort
else:
    port = hostAndPort[z+1:]
    host = hostAndPort[:z]


w = userAndPass.find(":")
if w == -1:
    password = "none"
    username = userAndPass # may or may not be ""
else:
    password = userAndPass[w+1:]
    username = userAndPass[:w] # may or may not be ""
    if username == "":
        raise ValueError
print("password is: " + password + "username is: " + username)

# function when sending a command
# given the socket it is sending on and the command
def send_cmd(sock, cmd):
    print('>', cmd)
    
    sock.sendall(bytes(cmd + '\r\n', 'utf-8'))
    while True:
        Message = ""
        while not '\n' in Message:
            Message += sock.recv(8192).decode('utf-8')
        Message1 = Message.split(' ')
        code = Message1[0]
        if int(code) // 200 == 1 or int(code) // 300 == 1:
            break
        else:
            raise ValueError

    print('>', Message, end='')
        
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
    sock.connect((host, int(port)))
    # receiving the welcome message initially
    while True:
        Message = ""
        while not '\n' in Message:
            Message += sock.recv(8192).decode('utf-8')
        if len(Message) > 0:
            break

    # sending initial commands if necessary
    send_cmd(sock, 'AUTH TLS')
    
    s = ssl.wrap_socket(sock)

    if username == "":
        send_cmd(s, "USER anonymous")
    else:
        send_cmd(s, "USER " + username)

    
    if password != "none":
        send_cmd(s, "PASS " + password)

    send_cmd(s, "PBSZ 0")
    send_cmd(s, "PROT P")

    if c == "DELE" or c == "MKD" or c == "RMD":
        send_cmd(s, command)
    else:
        send_cmd(s, "TYPE I")
        send_cmd(s, "MODE S")
        send_cmd(s, "STRU F")

        print('> PASV')
        s.sendall(bytes("PASV\r\n", 'utf-8'))
        while True:
            Message = ""
            while not '\n' in Message:
                Message += s.recv(8192).decode('utf-8')
            Message1 = Message.split(' ')
            code = Message1[0]

            print('<', Message, end='')
            
            if int(code) != 227:
                raise ValueError
            else:
                ipAndPort = Message1[4]
                #print("IP and port: " + ipAndPort)
                nums = ipAndPort[1:-4].split(',')
                print(nums)
                IP = ".".join(nums[0:4])
                print(IP)
                #print("port1: " + nums[4] + "port2: " + nums[5])
                fullPortINT = int(nums[4]) * 256 + int(nums[5])
                break

        print("IP: " + str(IP) + "port: " + str(fullPortINT))

        print('>', command)
        s.sendall(bytes(command, 'utf-8'))

        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock2:
            #try:
            sock2.connect((IP, fullPortINT))
            #except socket.error as  msg:
                #print("Couldnt connect with the socket-server: " + msg + "\n terminating program")
                #sys.exit(1)

            while True:
                Message = ""
                while not '\n' in Message:
                    Message += s.recv(8192).decode('utf-8')
                Message1 = Message.split(' ')
                code = Message1[0]

                print('<', Message, end='')
                
                if int(code) // 400 == 1 or int(code) // 500 == 1 or int(code) // 600 == 1:
                    sock2.close()
                    raise ValueError
                else:
                    break

            s2 = ssl.wrap_socket(sock2)
            if sendFile:
                with open(localFile, "rb") as f:
                    while True:
                        readSoFar = f.read(4096)
                        rsf = readSoFar
                        if not readSoFar:
                            break
                        s2.sendall(rsf)
            elif createFile:
                # receive file and create it
                with open(localFile, "wb") as f:
                    while True:
                        readSoFar = s2.recv(4096)
                        if not readSoFar:
                            break
                        f.write(readSoFar)
            elif receivels:
                read = "" 
                while True:
                        readSoFar = s2.recv(4096).decode('utf-8')
                        if not readSoFar:
                            break
                        read = read + str(readSoFar)
                print(str(read))
            if delete == "local":
                # delete the file locally
                os.remove(localFile)
            elif delete == "remote":
                s.sendall(bytes(command2, 'utf-8'))
                print(str(command2))

            s2.unwrap().close()
            while True:
                Message = ""
                while not '\n' in Message:
                    Message += s.recv(8192).decode('utf-8')
                Message1 = Message.split(' ')
                code = Message1[0]
                
                if int(code) // 200 == 1:
                    break
                else:
                    raise ValueError
            s.close()
